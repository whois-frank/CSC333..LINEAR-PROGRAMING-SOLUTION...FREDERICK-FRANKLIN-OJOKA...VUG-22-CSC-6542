 import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import linprog

def plot_graph(A, b, c, result, problem_title):
    x = np.linspace(0, 10, 400)  # Define grid range
    plt.figure(figsize=(8, 6))

    # Plot constraints
    for i in range(len(A)):
        if A[i][1] != 0:  # Avoid division by zero
            y = (b[i] - A[i][0] * x) / A[i][1]
            plt.plot(x, y, label=f"Constraint {i+1}")
            plt.fill_between(x, 0, y, where=(y >= 0), alpha=0.2)

    # Mark the optimal solution
    if result.success:
        x_opt, y_opt = result.x
        plt.plot(x_opt, y_opt, 'ro', label='Optimal Solution')
        plt.annotate(f"({x_opt:.2f}, {y_opt:.2f})", (x_opt, y_opt), textcoords="offset points", xytext=(-15, 10), ha='center')

    plt.axhline(0, color='black', linewidth=0.5)
    plt.axvline(0, color='black', linewidth=0.5)
    plt.xlim(0, 10)
    plt.ylim(0, 10)
    plt.xlabel('x (Product A)')
    plt.ylabel('y (Product B)')
    plt.title(problem_title)
    plt.legend()
    plt.grid()
    plt.show()

def solve_problem(c, A, b, bounds, title):
    result = linprog(c, A_ub=A, b_ub=b, bounds=bounds, method='highs')
    print(f"{title} Solution:")
    print(result)
    plot_graph(A, b, c, result, title)
    return result


# Problem 1: Maximizing Profit for a Factory
c1 = [-3, -4]
A1 = [[2, 3], [1, 2]]
b1 = [12, 8]
bounds1 = [(0, None), (0, None)]
solve_problem(c1, A1, b1, bounds1, "Maximizing Profit for a Factory")

# Problem 2: Minimizing Cost for a Manufacturer
c2 = [2, 5]
A2 = [[1, 2], [2, 1]]
b2 = [6, 5]
bounds2 = [(0, None), (0, None)]
solve_problem(c2, A2, b2, bounds2, "Minimizing Cost for a Manufacturer")

# Problem 3: Maximizing Production with Multiple Resources
c3 = [-5, -4]
A3 = [[2, 1], [3, 2], [1, 2]]
b3 = [20, 30, 18]
bounds3 = [(0, None), (0, None)]
solve_problem(c3, A3, b3, bounds3, "Maximizing Production with Multiple Resources")

# Problem 4: Maximizing Revenue from Sales
c4 = [-4, -5]
A4 = [[1, 2], [1, 2]]
b4 = [20, 15]
bounds4 = [(0, None), (0, None)]
solve_problem(c4, A4, b4, bounds4, "Maximizing Revenue from Sales")

# Problem 5: Resource Allocation for Two Projects
c5 = [-8, -7]
A5 = [[3, 4], [2, 1]]
b5 = [12, 6]
bounds5 = [(0, None), (0, None)]
solve_problem(c5, A5, b5, bounds5, "Resource Allocation for Two Projects")

# Problem 6: Production Planning for a Bakery
c6 = [-5, -3]
A6 = [[1, 2], [3, 2]]
b6 = [8, 12]
bounds6 = [(0, None), (0, None)]
solve_problem(c6, A6, b6, bounds6, "Production Planning for a Bakery")

# Problem 7: Minimizing Cost for a Transport Company
c7 = [6, 7]
A7 = [[3, 4], [2, 1]]
b7 = [18, 10]
bounds7 = [(0, None), (0, None)]
solve_problem(c7, A7, b7, bounds7, "Minimizing Cost for a Transport Company")

# Problem 8: Maximizing Revenue from Two Products
c8 = [-10, -12]
A8 = [[4, 3], [1, 2], [3, 2]]
b8 = [30, 18, 24]
bounds8 = [(0, None), (0, None)]
solve_problem(c8, A8, b8, bounds8, "Maximizing Revenue from Two Products")

# Problem 9: Advertising Campaign Budget Allocation
c9 = [-500000, -400000]
A9 = [[4000, 3000], [2000, 2500], [1000, 1500]]
b9 = [5000, 4500, 3000]
bounds9 = [(0, None), (0, None)]
solve_problem(c9, A9, b9, bounds9, "Advertising Campaign Budget Allocation")

# Problem 10: Meal Planning for a School Cafeteria
c10 = [-2, -1]
A10 = [[2, 4], [3, 2], [1, 2]]
b10 = [12, 12, 8]
bounds10 = [(0, None), (0, None)]
solve_problem(c10, A10, b10, bounds10, "Meal Planning for a School Cafeteria") 
